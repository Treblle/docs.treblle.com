---
import type { Props } from "@astrojs/starlight/props";
// Don't import the default head - we'll build our own
// import Default from "@astrojs/starlight/components/Head.astro"

const ogImageUrl = Astro.site 
  ? new URL(`/og/${Astro.props.id.replace(/\.\w+$/, '.png')}`, Astro.site)
  : `/og/${Astro.props.id.replace(/\.\w+$/, '.png')}`;

// Get the custom meta title if it exists, otherwise use the page title
const metaTitle = Astro.props.entry.data.metaTitle || Astro.props.entry.data.title;
const description = Astro.props.entry.data.description;
const canonical = Astro.site 
  ? new URL(Astro.url.pathname, Astro.site).href 
  : Astro.url.pathname;

// Extract host from site URL if it exists
const domain = Astro.site?.host || '';
---

<!-- Build our custom head from scratch -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name="robots" content="index,follow" />

<!-- Title tag without Starlight's formatting -->
<title>{metaTitle}</title>

<!-- Meta tags -->
<meta name="description" content={description} />
<meta name="generator" content={Astro.generator} />

<!-- Canonical URL -->
<link rel="canonical" href={canonical} />

<!-- Favicons -->
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />

<!-- Open Graph / Social media tags -->
<meta property="og:title" content={metaTitle} />
<meta property="og:description" content={description} />
<meta property="og:url" content={canonical} />
<meta property="og:type" content="article" />
{
  Astro.props.entry.data.image
  ? (
    <meta property="og:image" content={Astro.site ? new URL(Astro.props.entry.data.image, Astro.site).href : Astro.props.entry.data.image} /> 
    <meta name="twitter:image" content={Astro.site ? new URL(Astro.props.entry.data.image, Astro.site).href : Astro.props.entry.data.image} />
  )
  : (
    <meta property="og:image" content={typeof ogImageUrl === 'string' ? ogImageUrl : ogImageUrl.href} />
    <meta name="twitter:image" content={typeof ogImageUrl === 'string' ? ogImageUrl : ogImageUrl.href} />
  )
}

<!-- Twitter cards -->
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:title" content={metaTitle} />
<meta name="twitter:description" content={description} />
<meta property="twitter:domain" content={domain} />
<meta property="twitter:url" content={canonical} />

<!-- Sitemap -->
<link rel="sitemap" href="/sitemap-index.xml" />

<!-- Microsoft Clarity tracking code -->
<script type="text/javascript">
  (function(c,l,a,r,i,t,y){
    c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};
    t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;
    y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);
  })(window, document, "clarity", "script", "qtny6nzxcu");
</script>

<!-- Analytics -->
<script is:inline async src="https://www.googletagmanager.com/gtag/js?id=G-QF2CWF97TK"></script>
<script is:inline>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-QF2CWF97TK');
</script>

<!-- Google Tag Manager (noscript) -->
<noscript>
  <iframe
    src="https://www.googletagmanager.com/ns.html?id=GTM-XXXXXXX"
    height="0"
    width="0"
    style="display:none;visibility:hidden"
  ></iframe>
</noscript>

<!-- External links script with SEO optimization -->
<script is:inline>
// List of specific external URLs for sidebar that should open in new tabs
const sidebarExternalUrls = [
  'https://trust.treblle.com/',
  'https://treblle.com/knowledgebase',
  'https://apiacademy.treblle.com/laravel-api-course/'
];

// Function to add target="_blank" to EXTERNAL links only (SEO optimized)
function addTargetBlankToExternalLinks() {
  // Handle specific sidebar external links
  const sidebarLinks = document.querySelectorAll('.sidebar a[href], nav a[href], .sl-sidebar a[href]');
  
  sidebarLinks.forEach(link => {
    const href = link.getAttribute('href');
    
    // Check if the link is in our sidebar external URLs list
    if (sidebarExternalUrls.some(url => href === url || href.startsWith(url))) {
      link.setAttribute('target', '_blank');
      link.setAttribute('rel', 'noopener noreferrer');
    }
  });

  // Handle ONLY external links in documentation content
  const allLinks = document.querySelectorAll('main a[href], .content a[href], .sl-markdown-content a[href], article a[href]');
  
  allLinks.forEach(link => {
    const href = link.getAttribute('href');
    
    // Skip anchor links (same page navigation)
    if (!href || href.startsWith('#')) {
      return;
    }
    
    // Only process external links (http:// or https://)
    if (href.startsWith('http://') || href.startsWith('https://')) {
      const currentDomain = window.location.hostname;
      
      try {
        const linkUrl = new URL(href);
        
        // Only apply target="_blank" if it's a different domain (truly external)
        if (linkUrl.hostname !== currentDomain) {
          link.setAttribute('target', '_blank');
          link.setAttribute('rel', 'noopener noreferrer');
          
          // SEO Enhancement: Add title attribute for accessibility and context
          if (!link.getAttribute('title') && !link.getAttribute('aria-label')) {
            const linkText = link.textContent || link.innerText;
            if (linkText) {
              link.setAttribute('title', `${linkText} (opens in new tab)`);
            }
          }
        }
        // Same domain links (like docs.treblle.com) remain as normal navigation
      } catch (e) {
        // If URL parsing fails, assume it's external and apply target="_blank"
        link.setAttribute('target', '_blank');
        link.setAttribute('rel', 'noopener noreferrer');
      }
    }
    
    // Internal links (starting with /, ./, ../) remain untouched for normal navigation
    // This preserves the user journey and improves SEO metrics:
    // - Better bounce rate
    // - Increased session duration  
    // - Higher dwell time
    // - Improved user engagement signals
  });
}

// Run when DOM is ready
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', addTargetBlankToExternalLinks);
} else {
  addTargetBlankToExternalLinks();
}

// Also run when navigating (for SPA-like behavior)
document.addEventListener('astro:page-load', addTargetBlankToExternalLinks);

// Run after a small delay to catch dynamically loaded content
setTimeout(addTargetBlankToExternalLinks, 500);
</script>

<!-- Pass through any injected head content -->
<slot />